package atlas

import (
	"fmt"
	"sync"

	"golang.org/x/exp/maps"
)

type defaultMap[K comparable, V any] struct {
	mu      sync.Mutex
	mp      map[K]V
	genFunc func() (V, error)
}

func NewDefaultMap[K comparable, V any](genFunc func() (V, error)) *defaultMap[K, V] {
	if genFunc == nil {
		panic("genFunc can't be nil")
	}

	return &defaultMap[K, V]{mp: make(map[K]V), genFunc: genFunc}
}

// Set sets the value for the given key.
func (m *defaultMap[K, V]) Set(key K, value V) {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.mp[key] = value
}

// Has checks whether a key exists in the map.
func (m *defaultMap[K, V]) Has(key K) bool {
	m.mu.Lock()
	defer m.mu.Unlock()
	_, ok := m.mp[key]
	return ok
}

// Get gets the value of the given key. In case the key is not found, the value returned is generated by the `genFunc`.
func (m *defaultMap[K, V]) Get(key K) (V, error) {
	if !m.Has(key) {
		value, err := m.genFunc()
		if err != nil {
			return *new(V), fmt.Errorf("getting value from genFunc: %w", err)
		}
		m.Set(key, value)
	}

	m.mu.Lock()
	defer m.mu.Unlock()

	return m.mp[key], nil
}

// Delete deletes the map key.
func (m *defaultMap[K, V]) Delete(key K) {
	if !m.Has(key) {
		return
	}

	m.mu.Lock()
	defer m.mu.Unlock()

	delete(m.mp, key)
}

// Keys returns the map keys.
func (m *defaultMap[K, V]) Keys() []K {
	return maps.Keys(m.mp)
}

// Values returns the map values.
func (m *defaultMap[K, V]) Values() []V {
	return maps.Values(m.mp)
}

// Size returns the map size.
func (m *defaultMap[K, V]) Size() int {
	return len(m.mp)
}

// ToMap returns a shallow clone of the original map.
func (m *defaultMap[K, V]) ToMap() map[K]V {
	return maps.Clone(m.mp)
}
